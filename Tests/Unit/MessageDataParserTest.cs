using System;
using NUnit.Framework; // or Xunit
using Nethereum.Web3;
using static Nethereum.Util.UnitConversion;
using Arbitrum.Message;
using Nethereum.Hex.HexTypes;
using System.Numerics;

namespace Arbitrum.Tests.Unit
{
    public class SubmitRetryableMessageDataParserTests
    {
        [Test] // Use [Fact] if you're using Xunit
        public void DoesParseL1ToL2Message()
        {
            // Arrange
            var retryableData = "0x

            // Act
            var res = SubmitRetryableMessageDataParser.Parse(retryableData);

            // Assert
            //Assert.That(res.CallValueRefundAddress, Is.EqualTo("0x7F869dC59A96e798e759030b3c39398ba584F087"));
            //Assert.That(res.Data, Is.EqualTo("0x
            Assert.That(res.DestAddress, Is.EqualTo("0x467194771dAe2967Aef3ECbEDD3Bf9a310C76C65"));
            //Assert.That(res.ExcessFeeRefundAddress, Is.EqualTo("0x7F869dC59A96e798e759030b3c39398ba584F087"));
            //Assert.That(res.GasLimit, Is.EqualTo(BigInteger.Parse("0x0210f1")));
            //Assert.That(res.L1Value, Is.EqualTo(BigInteger.Parse("0x30346f1c785e")));
            //Assert.That(res.L2CallValue, Is.EqualTo(0));
            //Assert.That(res.MaxFeePerGas, Is.EqualTo(BigInteger.Parse("0x172c5865")));
            //Assert.That(res.MaxSubmissionFee, Is.EqualTo(BigInteger.Parse("0x53280cf149")));
        }

        [Test] // Use [Fact] if you're using Xunit
        public void DoesParseEthDepositInL1ToL2Message()
        {
            // Arrange
            var retryableData = "0x000000000000000000000000F71946496600E1E1D47B8A77EB2F109FD82DC86A0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001A078F0000D790000000000000000000000000000000000000000000000000000000000370E285A0C000000000000000000000000F71946496600E1E1D47B8A77EB2F109FD82DC86A000000000000000000000000F71946496600E1E1D47B8A77EB2F109FD82DC86A000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

            // Act
            var res = SubmitRetryableMessageDataParser.Parse(retryableData);

            // Assert
            //Assert.That(res.CallValueRefundAddress, Is.EqualTo("0xf71946496600e1e1d47b8A77EB2f109Fd82dc86a"));
            //Assert.That(res.Data, Is.EqualTo(""));
            ////Assert.That(res.DestAddress, Is.EqualTo("0xf71946496600e1e1d47b8A77EB2f109Fd82dc86a"));
            //Assert.That(res.ExcessFeeRefundAddress, Is.EqualTo("0xf71946496600e1e1d47b8A77EB2f109Fd82dc86a"));
            //Assert.That(res.GasLimit, Is.EqualTo(0));
            //Assert.That(res.L1Value, Is.EqualTo(Web3.Convert.ToWei(30.01, EthUnit.Ether)));
            //Assert.That(res.L2CallValue, Is.EqualTo(0));
            //Assert.That(res.MaxFeePerGas, Is.EqualTo(0));
            //Assert.That(res.MaxSubmissionFee, Is.EqualTo(BigInteger.Parse("0x370e285a0c")));
        }
    }
}
